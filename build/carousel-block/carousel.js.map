{"version":3,"file":"carousel-block/carousel.js","mappings":"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","sources":["webpack://gb-blocks/./src/carousel-block/carousel.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\n    const carousels = document.querySelectorAll('.carousel');\n\n    carousels.forEach(function(carousel) {\n        const track = carousel.querySelector('.carousel-track');\n        const slides = carousel.querySelectorAll('.carousel-slide');\n        const prevButton = carousel.querySelector('.carousel-prev');\n        const nextButton = carousel.querySelector('.carousel-next');\n        const dotsContainer = carousel.querySelector('.carousel-dots');\n\n        // Get settings from data attributes\n        const autoplay = carousel.getAttribute('data-autoplay') === 'true';\n        const autoplaySpeed = parseInt(carousel.getAttribute('data-autoplay-speed') || 3000);\n        const pauseOnHover = carousel.getAttribute('data-pause-on-hover') === 'true';\n        const infiniteLoop = carousel.getAttribute('data-infinite-loop') === 'true';\n        // showArrows and showDots are handled by the existence of elements in save.js\n\n        let currentIndex = 0;\n        let slidesPerView = getSlidesPerView();\n        let autoSlideInterval;\n\n        // Only set up dots if they exist\n        if (dotsContainer) {\n            // Clear existing dots\n            dotsContainer.innerHTML = '';\n\n            // Create correct number of dots\n            const totalDots = Math.ceil(slides.length / slidesPerView);\n            for (let i = 0; i < totalDots; i++) {\n                const dot = document.createElement('span');\n                dot.className = 'dot' + (i === 0 ? ' current-dot' : '');\n                dot.addEventListener('click', () => goToSlide(i));\n                dotsContainer.appendChild(dot);\n            }\n        }\n\n        function getSlidesPerView() {\n            if (window.innerWidth <= 480) {\n                return 1;\n            }\n            if (window.innerWidth <= 768) {\n                return 2;\n            }\n            return 3;\n        }\n\n        function updateCarousel() {\n            const slideWidth = 100 / slidesPerView;\n            track.style.transform = `translateX(-${currentIndex * slideWidth}%)`;\n\n            if (dotsContainer) {\n                const dots = dotsContainer.querySelectorAll('.dot');\n                dots.forEach((dot, index) => {\n                    dot.classList.toggle(\n                        'current-dot',\n                        index === Math.floor(currentIndex / slidesPerView)\n                    );\n                });\n            }\n        }\n\n        function goToSlide(index) {\n            currentIndex = index * slidesPerView;\n            updateCarousel();\n        }\n\n        function nextSlide() {\n            const maxIndex = slides.length - slidesPerView;\n            if (infiniteLoop) {\n                currentIndex = currentIndex >= maxIndex ? 0 : currentIndex + 1;\n            } else {\n                currentIndex = Math.min(maxIndex, currentIndex + 1);\n            }\n            updateCarousel();\n        }\n\n        function prevSlide() {\n            const maxIndex = slides.length - slidesPerView;\n            if (infiniteLoop) {\n                currentIndex = currentIndex <= 0 ? maxIndex : currentIndex - 1;\n            } else {\n                currentIndex = Math.max(0, currentIndex - 1);\n            }\n            updateCarousel();\n        }\n\n        function startAutoSlide() {\n            if (!autoplay) return;\n            stopAutoSlide();\n            autoSlideInterval = setInterval(nextSlide, autoplaySpeed);\n        }\n\n        function stopAutoSlide() {\n            if (autoSlideInterval) {\n                clearInterval(autoSlideInterval);\n            }\n        }\n\n        // Add event listeners only if the navigation buttons exist\n        if (prevButton) {\n            prevButton.addEventListener('click', () => {\n                prevSlide();\n                if (autoplay) stopAutoSlide();\n            });\n        }\n\n        if (nextButton) {\n            nextButton.addEventListener('click', () => {\n                nextSlide();\n                if (autoplay) stopAutoSlide();\n            });\n        }\n\n        window.addEventListener('resize', () => {\n            const newSlidesPerView = getSlidesPerView();\n            if (newSlidesPerView !== slidesPerView) {\n                slidesPerView = newSlidesPerView;\n                \n                // Recalculate dots only if dotsContainer exists\n                if (dotsContainer) {\n                    const totalDots = Math.ceil(slides.length / slidesPerView);\n                    dotsContainer.innerHTML = '';\n                    for (let i = 0; i < totalDots; i++) {\n                        const dot = document.createElement('span');\n                        dot.className = 'dot' + (i === 0 ? ' current-dot' : '');\n                        dot.addEventListener('click', () => goToSlide(i));\n                        dotsContainer.appendChild(dot);\n                    }\n                }\n                \n                updateCarousel();\n            }\n        });\n\n        // Start autoslide if enabled\n        startAutoSlide();\n\n        // Stop autoslide on hover if that option is enabled\n        if (pauseOnHover && autoplay) {\n            track.addEventListener('mouseenter', stopAutoSlide);\n            track.addEventListener('mouseleave', startAutoSlide);\n        }\n    });\n});"],"names":["document","addEventListener","carousels","querySelectorAll","forEach","carousel","track","querySelector","slides","prevButton","nextButton","dotsContainer","autoplay","getAttribute","autoplaySpeed","parseInt","pauseOnHover","infiniteLoop","currentIndex","slidesPerView","getSlidesPerView","autoSlideInterval","innerHTML","totalDots","Math","ceil","length","i","dot","createElement","className","goToSlide","appendChild","window","innerWidth","updateCarousel","slideWidth","style","transform","dots","index","classList","toggle","floor","nextSlide","maxIndex","min","prevSlide","max","startAutoSlide","stopAutoSlide","setInterval","clearInterval","newSlidesPerView"],"sourceRoot":""}